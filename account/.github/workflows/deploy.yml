name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - stage
      - prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v2

      - name: Set up Environment Variables
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/dev" ]]; then
            echo "ECR_REGION=us-east-2" >> $GITHUB_ENV
            echo "CLUSTER_NAME=ClusterOurshop" >> $GITHUB_ENV
            echo "NAMESPACE=dev" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}" >> $GITHUB_ENV
            echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_DEV }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == "refs/heads/stage" ]]; then
            echo "ECR_REGION=us-east-2" >> $GITHUB_ENV
            echo "CLUSTER_NAME=ClusterOurshop" >> $GITHUB_ENV
            echo "NAMESPACE=stage" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_STAGE }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_STAGE }}" >> $GITHUB_ENV
            echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_STAGE }}" >> $GITHUB_ENV
          else
            echo "ECR_REGION=us-east-2" >> $GITHUB_ENV
            echo "CLUSTER_NAME=ClusterOurshopBackProd" >> $GITHUB_ENV
            echo "NAMESPACE=prod" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
            echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_PROD }}" >> $GITHUB_ENV
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ECR_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.ECR_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_REGION }}.amazonaws.com

      - name: Build, tag, and push Docker image
        id: build-image
        run: |
          IMAGE_TAG=${{ github.sha }}
          REPOSITORY_NAME=java-ourshop-admin-${{ env.NAMESPACE }}
          ECR_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_REGION }}.amazonaws.com/${REPOSITORY_NAME}
          echo "Building Docker image with tag: ${IMAGE_TAG}"
          docker build -t $REPOSITORY_NAME:${IMAGE_TAG} .
          docker tag $REPOSITORY_NAME:${IMAGE_TAG} $ECR_URI:${IMAGE_TAG}
          docker push $ECR_URI:${IMAGE_TAG}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.ECR_REGION }}

      - name: Verify kubectl configuration
        run: |
          kubectl config view
          kubectl get svc

      - name: Deploy to Kubernetes
        run: |
          REPOSITORY_NAME=java-ourshop-admin-${{ env.NAMESPACE }}
          ECR_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_REGION }}.amazonaws.com/${REPOSITORY_NAME}
          kubectl set image deployment/${REPOSITORY_NAME} ${REPOSITORY_NAME}=${ECR_URI}:${{ github.sha }} -n ${NAMESPACE}
          kubectl rollout status deployment/${REPOSITORY_NAME} -n ${NAMESPACE}
